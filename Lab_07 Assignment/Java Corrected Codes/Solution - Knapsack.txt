import java.util.Scanner;

class Knapsack {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Input: ");
        int N = scanner.nextInt(); 
        int W = scanner.nextInt();
        scanner.close(); 
        
        int[] profit = new int[N+1];
        int[] weight = new int[N+1];
    
        for (int n = 1; n <= N; n++) {
            profit[n] = (int) (Math.random() * 1000);
            weight[n] = (int) (Math.random() * (W / 2));
        }

        int[][] opt = new int[N+1][W+1];
        boolean[][] sol = new boolean[N+1][W+1];

        for (int n = 1; n <= N; n++) {                                                                                                                                                              
            for (int w = 1; w <= W; w++) {
                int option1 = opt[n-1][w];

                int option2 = Integer.MIN_VALUE;
                if (weight[n] <= w) 
                    option2 = profit[n] + opt[n-1][w - weight[n]];

                opt[n][w] = Math.max(option1, option2);
                sol[n][w] = (option2 > option1);
            }
        }
    
        boolean[] take = new boolean[N+1];
        for (int n = N, w = W; n > 0; n--) {
            if (sol[n][w]) { 
                take[n] = true;  
                w -= weight[n];             
            }
            else { 
                take[n] = false;
            }
        }

        
        System.out.println("\nOutput: ");
        System.out.println("item" + "\t" + "profit" + "\t" + "weight" + "\t" + "take");
        for (int n = 1; n <= N; n++) {
            System.out.println(n + "\t" + profit[n] + "\t" + weight[n] + "\t" + take[n]);
        }
    }
}

class Main {
    public static void main(String args[]) {
        Knapsack.main(args);
    }
}


// Input: 6, 2000

// Output: 
// Item	Profit	Weight	Take
// 1	336	    784	    false	
// 2	674	    1583	false
// 3	763	    392	    true
// 4	544	    1136	true
// 5	14	    1258	false		
// 6	738	    306	    true	
import java.util.Scanner;

class QuadraticProbingHashTable {
    private int currentSize, maxSize;
    private String[] keys;
    private String[] vals;

    public QuadraticProbingHashTable(int capacity) {
        currentSize = 0;
        maxSize = capacity;
        keys = new String[maxSize];
        vals = new String[maxSize];
    }

    public void makeEmpty() {
        currentSize = 0;
        keys = new String[maxSize];
        vals = new String[maxSize];
    }

    public int getSize() {
        return currentSize;
    }

    public boolean isFull() {
        return currentSize == maxSize;
    }

    public boolean isEmpty() {
        return getSize() == 0;
    }

    public boolean contains(String key) {
        return get(key) != null;
    }

    private int hash(String key) {
        return Math.abs(key.hashCode()) % maxSize;
    }

    public void insert(String key, String val) {
        int tmp = hash(key);
        int i = tmp, h = 1;
        do {
            if (keys[i] == null) {
                keys[i] = key;
                vals[i] = val;
                currentSize++;
                return;
            }

            if (keys[i].equals(key)) {
                vals[i] = val;
                return;
            }

            i = (tmp + h * h) % maxSize;
            h++;
        } while (i != tmp);
    }

    public String get(String key) {
        int i = hash(key), h = 1;
        while (keys[i] != null) {
            if (keys[i].equals(key))
                return vals[i];
            i = (i + h * h++) % maxSize; 
        }
        return null;
    }

    public void remove(String key) {
        if (!contains(key))
            return;

        int i = hash(key), h = 1;
        while (!key.equals(keys[i]))
            i = (i + h * h++) % maxSize;

        keys[i] = vals[i] = null;
        for (i = (i + h * h++) % maxSize; keys[i] != null; i = (i + h * h++) % maxSize) {
            String tmpKey = keys[i], tmpVal = vals[i];
            keys[i] = vals[i] = null;
            currentSize--;
            insert(tmpKey, tmpVal);
        }

        currentSize--;
    }

    public void printHashTable() {
        System.out.println("\nHash Table:");
        for (int i = 0; i < maxSize; i++) {
            if (keys[i] != null)
                System.out.println(keys[i] + " " + vals[i]);
        }
        System.out.println();
    }
}

class QuadraticProbingHashTableTest {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("Hash Table Test\n");
        System.out.print("Enter size: ");

        QuadraticProbingHashTable qpht = new QuadraticProbingHashTable(scan.nextInt());
        char ch;
        do {
            System.out.println("\nHash Table Operations");
            System.out.println("1. insert ");
            System.out.println("2. remove");
            System.out.println("3. get");
            System.out.println("4. clear");
            System.out.println("5. size");

            System.out.print("\nSelect option: ");
            int choice = scan.nextInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter key and value: ");
                    qpht.insert(scan.next(), scan.next());
                    break;

                case 2:
                    System.out.print("Enter key: ");
                    qpht.remove(scan.next());
                    break;

                case 3:
                    System.out.print("Enter key: ");
                    System.out.println("Value = " + qpht.get(scan.next()));
                    break;

                case 4:
                    qpht.makeEmpty();
                    System.out.println("Hash Table Cleared\n");
                    break;

                case 5:
                    System.out.println("Size = " + qpht.getSize());
                    break;

                default:
                    System.out.println("Wrong Entry \n");
                    break;
            }

            qpht.printHashTable();
            System.out.print("Do you want to continue (Type y or n): ");
            ch = scan.next().charAt(0);
        } while (ch == 'Y' || ch == 'y');

        scan.close();
    }
}

class Main {
    public static void main(String[] args) {
        QuadraticProbingHashTableTest.main(args);  
    }
}
